<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MonMagus</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Avoid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
friction = 0.5;
image_speed = 0.2;
hp = 100;
damage = 10; 

prey = ds_list_create();
ds_list_add(prey, obj_Player);

//teammate = obj_Teammate;
if(instance_exists(obj_Teammate) == true)
{
    with(obj_Teammate)
    {
        ds_list_add(other.prey, id);
    }
}

//ds_list_add(prey, obj_Teammate);
closest = obj_Player;

for(count = 0; count &lt; ds_list_size(prey); count++)
{
    if(distance_to_object(prey[| count]) &lt;= distance_to_object(closest))
    {
        closest = prey[| count];
    }
}

frame = 0;
move = true;
mode = "Idle";
goTowards = false;
goAttack = false;
canAttack = true;
goRandom = false;
goRandomPointX = 0;
goRandomPointY = 0;

char = spr_MonMagus;
walk = spr_MonMagusWalk;
attack = spr_MonMagusAttack;
attackSpeed = 0.2;
proj = obj_FireballMagus;
projx = 95;
projy = 66;
projSpeed = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
canAttack = true;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_blend = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hp &lt;=0 )
{
    instance_destroy();
}
if(pause == false &amp;&amp; room == rm_Map &amp;&amp; instance_exists(obj_GoodGuys) == true)
{
    frame = image_index;
    for(count = 0; count &lt; ds_list_size(prey); count++)
    {
        if(distance_to_object(prey[| count]) &lt;= distance_to_object(closest))
        {
            closest = prey[| count];
        }
    }
    image_xscale = sign(closest.x - x);
    
    switch(mode)
    {
        case "Attack":
            if(image_index &gt;= image_number - 1 &amp;&amp; sprite_index == attack) 
            {
                image_speed = 0.2;
                sprite_index = char;
                speed = 0;
                mode = "Idle";
                
                randOffset = random_range(-20, 20);
                
                inst = instance_create(x, y, proj);
                with(inst)
                {
                    closest = other.closest;
                    image_angle = point_direction(x, y, closest.x, closest.y) + other.randOffset;
                    direction = point_direction(x, y, closest.x, closest.y) + other.randOffset;
                    //closest = other.closest;
                    //image_xscale = sign(closest.x - x);
                    vel = 4;
                }              
            }
            else
            {
                sprite_index = attack;
                image_speed = 0.2;
                //move_towards_point(closest.x - sign(closest.x - x)*32 , closest.y, 6);                
            }
            break;
        case "Move":
            if(distance_to_point(goRandomPointX, goRandomPointY) &lt;= 32)
            {
                mode = "Idle";
            } 
            image_speed = 0.2;
            sprite_index = walk;
            move_towards_point(goRandomPointX, goRandomPointY, 3);
            break;
        case "Idle":
            break;
    }
    
    if(mode == "Idle")
    {
        if(random(1) &gt; 0.5)
        {
            goRandomPointX = round(random(room_width));
            goRandomPointY = round(random(room_height));
            mode = "Move";
        }
        else
        {
            mode = "Attack";
        }
    }
}
else if(pause == true &amp;&amp; room == rm_Map)
{
    image_index = frame;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Melee">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = room_speed * 0.1;
image_blend = c_red;

hp -= 1;

canAttack = false;
goAttack = false;
sprite_index = char;
alarm[2] = room_speed * 0.5;
mode = "Idle";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Fireball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = room_speed * 0.1;
image_blend = c_red;
hp -= 5;
canAttack = false;
goAttack = false;
sprite_index = char;
alarm[2] = room_speed * 0.5;
mode = "Idle";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Arrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = room_speed * 0.1;
image_blend = c_red;

hp -= 10;

canAttack = false;
goAttack = false;
sprite_index = char;
alarm[2] = room_speed * 0.5;
mode = "Idle";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(room == rm_Map)
{
    hpBar = draw_healthbar(x - 28 , y - 32, x + 28, y - 42, hp, c_black, c_red, c_green, 0, true, true);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(x, y - 37, string(hp));

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
