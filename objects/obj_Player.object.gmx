<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Invisible</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_GoodGuys</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>friction = 0.25;
image_speed = 0.2;
left = false;
super = false;
hitAgain = true;
check = true;

//potential = "";
decision = true;

name = "Player";
if(room == rm_Lobby)
{
    name = global.playerName;
}
if(room == rm_Map)
{
    name = global.playerName;
}
hp = 0;
armor = 0;
weak = 1;

char = 0;
walk = 0;
attack = 0;
attackSpeed = 0;
pos = 0;
proj = 0;
projx = 0;
projy = 0;
projSpeed = 0;
frame = 0;
complimentMe = false;
justPinged = false;
hitMe = false;
hitMeName = "";

blink = true;
move = true;

goodCount = 0;
good[goodCount] = "Goodjob";
goodCount++;
good[goodCount] = "Good job";
goodCount++;
good[goodCount] = "Good job!";
goodCount++;
good[goodCount] = "gj";
goodCount++;
good[goodCount] = "nice";
goodCount++;
good[goodCount] = "noice";
goodCount++;
good[goodCount] = "NOICE";
goodCount++;
good[goodCount] = "Nice!";
goodCount++;
good[goodCount] = "Great!";
goodCount++;
good[goodCount] = "Excellent!";
goodCount++;
good[goodCount] = "good";

adjCount = 0;
adj[adjCount] = "pickled";
adjCount++;
adj[adjCount] = "bloody";
adjCount++;
adj[adjCount] = "blocky";
adjCount++;
adj[adjCount] = "spicy";
adjCount++;
adj[adjCount] = "wobbly";
adjCount++;
adj[adjCount] = "wrinkled";
adjCount++;
adj[adjCount] = "junky";
adjCount++;
adj[adjCount] = "cheesy";
adjCount++;
adj[adjCount] = "grungy";
adjCount++;
adj[adjCount] = "boosted";
adjCount++;
adj[adjCount] = "icky";
adjCount++;
adj[adjCount] = "crazy";
adjCount++;
adj[adjCount] = "sweaty";
adjCount++;
adj[adjCount] = "sour";
adjCount++;
adj[adjCount] = "bitter";
adjCount++;
adj[adjCount] = "salty";
adjCount++;
adj[adjCount] = "toasty";
adjCount++;
adj[adjCount] = "bloated";
adjCount++;
adj[adjCount] = "rotten";
adjCount++;
adj[adjCount] = "smelly";
adjCount++;
adj[adjCount] = "lazy";

nounCount = 0;
noun[nounCount] = "tomato";
nounCount++;
noun[nounCount] = "potato";
nounCount++;
noun[nounCount] = "pineapple";
nounCount++;
noun[nounCount] = "swine";
nounCount++;
noun[nounCount] = "fruit";
nounCount++;
noun[nounCount] = "animal";
nounCount++;
noun[nounCount] = "apple";
nounCount++;
noun[nounCount] = "raspberry";
nounCount++;
noun[nounCount] = "strawberry";
nounCount++;
noun[nounCount] = "watermelon";
nounCount++;
noun[nounCount] = "cantaloupe";
nounCount++;
noun[nounCount] = "poker";
nounCount++;
noun[nounCount] = "honeydew";
nounCount++;
noun[nounCount] = "grape";
nounCount++;
noun[nounCount] = "kiwi";
nounCount++;
noun[nounCount] = "avocado";
nounCount++;
noun[nounCount] = "bok choi";
nounCount++;
noun[nounCount] = "lemon";
nounCount++;
noun[nounCount] = "lime";
nounCount++;
noun[nounCount] = "corpse";
nounCount++;
noun[nounCount] = "orange";
nounCount++;
noun[nounCount] = "citrus";
nounCount++;
noun[nounCount] = "banana";
nounCount++;
noun[nounCount] = "mango";

badCount = 0;
for(count = 0; count &lt; array_length_1d(adj); count++)
{
    for(count2 = 0; count2 &lt; array_length_1d(noun); count2++)
    {
        bad[badCount] = "You " + adj[count] + " " + noun[count2] + "!";
        badCount ++;
    }
}
for(count = 0; count &lt; array_length_1d(noun); count++)
{
    for(count2 = 0; count2 &lt; array_length_1d(noun); count2++)
    {
        if(noun[count] != noun[count2])
        {
            bad[badCount] = "Go " + noun[count] + " a " + noun[count2] + "!";
            badCount ++;
        }
    }
}
//show_debug_message(badCount);
//show_debug_message(array_length_1d(bad));
//show_debug_message(bad);
//show_debug_message(noun[0]);

greetCount = 0;
greet[greetCount] = "Hi";
greetCount++;
greet[greetCount] = "sup";
greetCount++;
greet[greetCount] = "Hello!";
greetCount++;
greet[greetCount] = "Howdy.";
greetCount++;
greet[greetCount] = "heyyyy";
greetCount++;
greet[greetCount] = "hallo";


noCount = 0;
no[noCount] = "no";
noCount++;
no[noCount] = "No way";
noCount++;
no[noCount] = "I refuse";
noCount++;
no[noCount] = "I'm good";
noCount++;
no[noCount] = "Nah";


yesCount = 0;
yes[yesCount] = "Yes.";
yesCount++;
yes[yesCount] = "yeah";
yesCount++;
yes[yesCount] = "yea";
yesCount++;
yes[yesCount] = "yup";
yesCount++;
yes[yesCount] = "Of course.";
yesCount++;
yes[yesCount] = "sure";

needCount = 0;
need[needCount] = "We need a...";

thankCount = 0;
thank[thankCount] = "Thanks";
thankCount++;
thank[thankCount] = "Thank you.";
thankCount++;
thank[thankCount] = "ty";
thankCount++;
thank[thankCount] = "thx";

whatCount = 0;
what[whatCount] = "wat";
whatCount++;
what[whatCount] = "What?";
whatCount++;
what[whatCount] = "?";
whatCount++;
what[whatCount] = "huh?";
whatCount++;
what[whatCount] = "???";

npCount = 0;
np[npCount] = "np";
npCount++;
np[npCount] = "of course";
npCount++;
np[npCount] = "No problem.";

comeCount = 0;
come[comeCount] = "Come";
comeCount++;
come[comeCount] = "here";
comeCount++;
come[comeCount] = "Go there please";
comeCount++;
come[comeCount] = "help";
comeCount++;
come[comeCount] = "Regroup";
comeCount++;
come[comeCount] = "halp";
comeCount++;
come[comeCount] = "Help";
comeCount++;
come[comeCount] = "come";
comeCount++;

oiCount = 0;
oi[oiCount] = "Oi";
oiCount++;
oi[oiCount] = "Watch it!";
oiCount++;
oi[oiCount] = "Where are you shooting that thing!?";
oiCount++;
oi[oiCount] = "Ow";
oiCount++;
oi[oiCount] = "ouch";
oiCount++;

sorryCount = 0;
sorry[sorryCount] = "srry"
sorryCount++;
sorry[sorryCount] = "Sorry"
sorryCount++;
sorry[sorryCount] = "my bad"
sorryCount++;
sorry[sorryCount] = "Apologies."
sorryCount++;
sorry[sorryCount] = "my fault"
sorryCount++;
sorry[sorryCount] = "oops"


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitMe = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>justPinged = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>complimentMe = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>check = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitAgain = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super == true)
{
    if(blink == true)
    {
        image_alpha = 0.5;
        alarm[1] = room_speed * .1;
        blink = false;
    }
    else
    {
        image_alpha = 1;
        alarm[1] = room_speed * .1;
        blink = true;
    }
    move = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>super = false;

image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(global.pause == false &amp;&amp; room == rm_Map)
{
    if(hp &lt;= 0)
    {
        pos = ds_list_find_index(obj_Spawn.members, id);
        ds_list_delete(obj_Spawn.members, pos);
        instance_destroy();
    }
    if(complimentMe == true &amp;&amp; alarm[4] == -1)
    {
        alarm[4] = room_speed * 2;
    }
    if(hitMe == true &amp;&amp; alarm[6] == -1)
    {
        alarm[6] = room_speed * 4;
    }
    
    frame = image_index;
    if((keyboard_check(ord('A')) || keyboard_check(ord('D')) || keyboard_check(ord('W')) || keyboard_check(ord('S'))) &amp;&amp; move == true)
    {
        //show_debug_message(string(char) + " " + string(walk) + " " + string(attack));
        sprite_index = walk;
        if(keyboard_check(ord('A'))) 
        {
            image_xscale = -1; 
            hspeed -= 1;
            left = true;
        }
        if(keyboard_check(ord('D'))) 
        {
            image_xscale = 1;
            hspeed += 1;
            left = false;
        }
        if(keyboard_check(ord('W'))) vspeed -= 1;
        if(keyboard_check(ord('S'))) vspeed += 1;   
    }
    else if(keyboard_check_pressed(vk_space))
    {
        image_speed = attackSpeed;
        sprite_index = attack;
    }
    else if(image_index &gt;= image_number - 1 &amp;&amp; sprite_index == attack) //img_index &gt;= image_number - 1 &amp;&amp; sprite_index == attack || 
    {
        check = false;
        image_speed = 0.2;
        sprite_index = char;
        var inst;
        if(left == true)
        {
            inst = instance_create(x - (projx - 64), y + (projy - 64), proj);
            inst.vel = -projSpeed;
            inst.image_xscale = -1;
            inst.name = name;
        }
        else
        {
            inst = instance_create(x + (projx - 64), y + (projy - 64), proj);
            inst.vel = projSpeed;
            inst.image_xscale = 1;
            inst.name = name;
        } 
        alarm[3] = room_speed * 0.2;    
    }
    else if(sprite_index != attack)
    {
        sprite_index = char;
    }
    
    
    if(speed &gt;= 8) speed = 8;
    
    x = min(x, room_width - 16);
    x = max(x, 16);
    y = min(y, room_height - 16);
    y = max(y, 16);    
    
}
else
{
    image_index = frame;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button_pressed(mb_left) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_Bubble))
{
    if(instance_exists(obj_TalkLeftRight))
    {
        with(obj_TalkLeftRight)
        {
            if(name == other.name)
            {
                instance_destroy();
            }
        }
    }
    if(instance_exists(obj_TalkRight))
    {
        with(obj_TalkRight)
        {
            if(name == other.name)
            {
                instance_destroy();
            }
        }
    }
    if(instance_exists(obj_Teammate) == true &amp;&amp; instance_exists(obj_Spawn) == true &amp;&amp; room == rm_Map &amp;&amp; global.pause == false)
    {
        
        mouseClosest = ds_list_find_value(obj_Spawn.members, 1);
    
        for(count = 0; count &lt; ds_list_size(obj_Spawn.members); count++)
        {
            if(obj_Spawn.members[| count].name != name)
            {
                if(point_distance(mouse_x, mouse_y, obj_Spawn.members[| count].x, obj_Spawn.members[| count].y) &lt;= mouseClosest)
                {
                    mouseClosest = obj_Spawn.members[| count];
                }
            }
        }
        
        //mouseClosest = instance_nearest(mouse_x, mouse_y, obj_GoodGuys);
        
        instance_create(mouse_x, mouse_y, obj_Ping);
        
        global.pause = false;
        text = come[floor(random(comeCount))];
        number = 10;
        
        if(random(1) &gt; 0.8)
        {
        if(point_distance(obj_Player.x, obj_Player.y, 0, y) &lt;= 128)
        {
            if(point_distance(obj_Player.x, obj_Player.y, x, 0) &lt;= 128)
            {
                scr_text(text, x + 64, y + 64, obj_Player, 1, -1, obj_Player.name);
            }
            else if(point_distance(obj_Player.x, obj_Player.y, x, room_height) &lt;= 128)
            {
                scr_text(text, x + 64, y - 64, obj_Player, 1, 1, obj_Player.name);
            }
            else
            {
                scr_text(text, x + 64, y - 64, obj_Player, 1, 1, obj_Player.name);
            }
        }
        else if(point_distance(obj_Player.x, obj_Player.y, room_width, y) &lt;= 128)
        {
            if(point_distance(obj_Player.x, obj_Player.y, x, 0) &lt;= 128)
            {
                scr_text(text, x - 64, y + 64, obj_Player, -1, -1, obj_Player.name);
            }
            else if(point_distance(obj_Player.x, obj_Player.y, x, room_height) &lt;= 128)
            {
                scr_text(text, x - 64, y - 64, obj_Player, -1, 1, obj_Player.name);
            }
            else
            {
                scr_text(text, x - 64, y - 64, obj_Player, -1, 1, obj_Player.name);
            }
        }
        else if(point_distance(obj_Player.x, obj_Player.y, x, 0) &lt;= 128)
        {
            if(obj_Player.x &gt;= 640)
            {
                scr_text(text, x - 64, y + 64, obj_Player, -1, -1, obj_Player.name);
            }
            else
            {
                scr_text(text, x + 64, y + 64, obj_Player, 1, -1, obj_Player.name);
            }
        }
        else if(point_distance(obj_Player.x, obj_Player.y, x, room_height) &lt;= 128)
        {
            if(obj_Player.x &gt;= 640)
            {
                scr_text(text, x - 64, y - 64, obj_Player, -1, 1, obj_Player.name);
            }
            else
            {
                scr_text(text, x + 64, y - 64, obj_Player, 1, 1, obj_Player.name);
            }
        }
        else
        {
            if(obj_Player.x &gt;= 640)
            {
                scr_text(text, x - 64, y - 64, obj_Player, -1, 1, obj_Player.name);
            }
            else
            {
                scr_text(text, x + 64, y - 64, obj_Player, 1, 1, obj_Player.name);
            }
        }
        
        if(instance_exists(obj_Dialogue) == true)
        {
            dialogue = obj_Dialogue;
            
            ds_list_add(dialogue.convo, text);
            ds_list_add(dialogue.listNum, number);
            ds_list_add(dialogue.listTalk, name);
            
            if(dialogue.line == "")
            {
                dialogue.line = name + ": " + text;
            }
            else
            {
                dialogue.line = dialogue.line + "#" + name + ": " + text;
            }
            global.pause = false;
        }
        }
        
        mouseClosest.randChance = random(1);
        if(mouseClosest.stability &gt;= 0)
        {
            mouseClosest.goRandom = false;
            mouseClosest.goAttack = false;
            mouseClosest.run = false;
            mouseClosest.running = false;
            mouseClosest.goTo = true;
            mouseClosest.runX = mouse_x;
            mouseClosest.runY = mouse_y;
        }
        else if(mouseClosest.stability &gt;= -30)
        {
            if(mouseClosest.randChance &gt; 0.8)
            {
                mouseClosest.goRandom = false;
                mouseClosest.goAttack = false;
                mouseClosest.run = false;
                mouseClosest.running = false;
                mouseClosest.goTo = true;
                mouseClosest.runX = mouse_x;
                mouseClosest.runY = mouse_y;
            }
        }
        justPinged = true;
        alarm[5] = room_speed * 1.5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Portal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//nothing happends
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Fireball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super != true &amp;&amp; check == true &amp;&amp; pause == false)
{
    super = true;
    hp -= (5 - armor);
    alarm[0] = room_speed * 1.5;
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[1] = room_speed * .1;
    blink = true;
}
else if(super != true &amp;&amp; other.name != name &amp;&amp; pause == false)
{
    
    super = true;
    hp -= (5 - armor);
    alarm[0] = room_speed * 1.5;
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[1] = room_speed * .1;
    blink = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Arrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super == false &amp;&amp; check == true &amp;&amp; pause == false)
{
    super = true;
    hp -= (5 - armor);
    alarm[0] = room_speed * 1.5;
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[1] = room_speed * .1;
    blink = true;
}
else if(super == false &amp;&amp; other.name != name &amp;&amp; pause == false)
{
    
    super = true;
    hp -= (5 - armor);
    alarm[0] = room_speed * 1.5;
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[1] = room_speed * .1;
    blink = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Teammate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super = false &amp;&amp; other.super = false)// &amp;&amp; hitAgain == true)
{
    other.hit = true;
    other.alarm[5] = room_speed * 0.5;
    
    other.speed = 0;
    other.hspeed += hspeed * 3;
    other.vspeed += vspeed * 3;
    /*
    if(hspeed &gt;= other.hspeed)
    {
        other.hspeed = 0;
        other.hspeed += hspeed * 3;// * 2;
    }
    else
    {
        hspeed = 0;
        hspeed += other.hspeed * 3;
    }   
    if(vspeed &gt;= other.hspeed)
    {
        other.vspeed = 0;
        other.vspeed += vspeed * 3;// * 2;
    }
    else
    {
        vspeed = 0;
        vspeed += other.vspeed * 3;
    }  
    */
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Avoid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super == false &amp;&amp; pause == false)
{
    super = true;
    alarm[0] = room_speed * (2);
    hp -= (10 - armor);
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    vspeed += -1 * weak;
    move = false;
    //alarm[2] = room_speed * .2;
    alarm[1] = room_speed * .1;
    blink = true;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_Lobby )
{
    draw_self();
    if(id == (ds_list_find_value(global.tempTeam, 0)))
    {
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    font = fnt_Arial;
    
    b = "Unchosen";
    if(sprite_index == spr_Mage)
    {
        b = "Mage";
    }
    else if(sprite_index == spr_Archer)
    {
        b = "Archer";
    }
    else if(sprite_index == spr_Knight)
    {
        b = "Knight";
    }
    
    if(decision == true)
    {
        pend = '"' + name + '"' + "#Pending#Selection:#" + b
        draw_text(x, y + 64, pend);
    }
    else
    {
         pend = '"' + name + '"' + "#Locked#Selection:#" + b
         draw_text(x, y + 64, pend);
    }
    }
}
if(room == rm_Map)
{
    draw_self();
    hpBar = draw_healthbar(x - 28 , y - 32, x + 28, y - 42, hp, c_black, c_red, c_green, 0, true, true);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(x, y - 37, string(hp));
    draw_text(x, y - 50, name);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message(hitMe);
show_debug_message(obj_Teammate.hitMeName);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.pause == false &amp;&amp; room == rm_Map &amp;&amp; instance_exists(obj_Bubble) == false)
{
    ded[0] = sorry[floor(random(sorryCount))];
    ded[1] = oi[floor(random(oiCount))];
    ded[2] = good[floor(random(goodCount))];
    ded[3] = bad[floor(random(badCount))];
    scr_Bubble(ded, x, y, "inGame", name);
    speed = 0;
}
else if(instance_exists(obj_Bubble) == true)
{
    with(obj_Bubble)
    {
        instance_destroy();
    }
    global.pause = false;
}
//
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
