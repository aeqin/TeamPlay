<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Invisible</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_GoodGuys</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//event_inherited();
randomize();

depth = depth - instance_number(obj_Teammate);

talk = false;
tpause = 2;
text = "";
if(room == rm_Lobby)
{
    potential = "Unchosen";
}
decision = true;
rec = false;
doAdd = true;
final = false;

friction = 0.25;
image_speed = 0.2;
left = false;
super = false;
check = true;

goRandom = false;
hit = false;
predator = ds_list_create();
closest = id;
closest2 = id;
quadrant = -1;
quadrantYou = -1;
run = false;
runFast = false;
runX = -1000;
runY = -1000;
decision = true;
admire = false;
goAttack = false;
goTo = false;
running = false;
runningDir = "";
runningTemp = 0;
coll = "";
complimentMe = false;
hitMe = false;
hitMeName = "";

randChance = 0;
stableX = -1000;
stableY = -1000;
diffX = 0;
diffY = 0;

namesCount = 0;
names[namesCount] = "Jack";
namesCount++;
names[namesCount] = "Juan";
namesCount++;
names[namesCount] = "Rock Candy";
namesCount++;
names[namesCount] = "Sun";
namesCount++;
names[namesCount] = "Moon";
namesCount++;
names[namesCount] = "Saber";
namesCount++;
names[namesCount] = "Lightning";
namesCount++;
names[namesCount] = "Borealis";
namesCount++;
names[namesCount] = "Cup";
namesCount++;
names[namesCount] = "Log";
namesCount++;
names[namesCount] = "Rubix";
namesCount++;
names[namesCount] = "Matt";
namesCount++;
names[namesCount] = "Mayhem";
namesCount++;
names[namesCount] = "Light";
namesCount++;
names[namesCount] = "Strength";
namesCount++;
names[namesCount] = "Hope";
namesCount++;
names[namesCount] = "Gamer";
namesCount++;
names[namesCount] = "Aqua";
namesCount++;
names[namesCount] = "Whirlwind";
namesCount++;
names[namesCount] = "Wallace";
namesCount++;
names[namesCount] = "Calculator";
namesCount++;
names[namesCount] = "Physics";
namesCount++;
names[namesCount] = "Dragon";
namesCount++;
names[namesCount] = "Faker";
namesCount++;
names[namesCount] = "Typhoon";
namesCount++;
names[namesCount] = "Maelstrom";
namesCount++;
names[namesCount] = "Void";
namesCount++;
names[namesCount] = "Requiem";
namesCount++;
names[namesCount] = "Warmonger";
namesCount++;
names[namesCount] = "Deft";
namesCount++;
names[namesCount] = "Rush";
namesCount++;
names[namesCount] = "Box";
namesCount++;
names[namesCount] = "Wire";
namesCount++;
names[namesCount] = "Stream";
namesCount++;
names[namesCount] = "Ocean";
namesCount++;
names[namesCount] = "Tsunami";
namesCount++;
names[namesCount] = "Pork Bun";
namesCount++;
names[namesCount] = "Whale Pod";
namesCount++;
names[namesCount] = "Exile";
namesCount++;
names[namesCount] = "Powerup";
namesCount++;
names[namesCount] = "Pick Achoo";
namesCount++;
names[namesCount] = "Savage Oak";
namesCount++;
names[namesCount] = "Current";
namesCount++;
names[namesCount] = "Star";
namesCount++;
names[namesCount] = "Beast";
namesCount++;
names[namesCount] = "Victory";
namesCount++;
names[namesCount] = "Name Taken";
namesCount++;
names[namesCount] = "Default";
namesCount++;
names[namesCount] = "Flame";
namesCount++;
names[namesCount] = "Frost";
namesCount++;
names[namesCount] = "Chompers";
namesCount++;
names[namesCount] = "Apex";
namesCount++;
names[namesCount] = "Truth";


name = names[round(random(namesCount))];
hp = 100;
armor = 0;
weak = 1;

char = 0;
walk = 0;
attack = 0;
attackSpeed = 0;
pos = 0;
proj = 0;
projx = 0;
projy = 0;
projSpeed = 0;
frame = 0;

blink = true;
move = true;

//sprite_index = char;
position = 0;



//-100 more toxic, 100 more nice
if(room == rm_Lobby)
{
    stability = random_range(-50, 100);
    show_debug_message(name + ": " + string(stability));
}
/*
if(room == rm_Map) 
{
    for(count = 0; count &lt; ds_list_size(global.tempTeam); count++)
    {
        if((ds_list_find_value(global.tempTeam, count)).name == name)
        { 
            stability = (ds_list_find_value(global.tempTeam, count)).stability;
        }
    }
}
*/


if(room == rm_Lobby || room == rm_Map)
{
    dialogue = obj_Dialogue;
}
//dialogue = obj_Dialogue;
if(room == rm_Lobby)
{
    if(ds_list_size(dialogue.listNum) != 0)
    {
        alarm[0] = room_speed * tpause;
    }
    
    if(random(1) &gt; 0.9)
    {
        if(stability &gt; 0)
        {
            if(random(1) &gt; 0.7)
            {
                if(random(1) &gt; 0.5)
                {
                    potential = "Mage";
                }
                else
                {
                    potential = "Archer";
                }
            }
            else
            {
                potential = "Knight";
            }
        }
        else
        {
            if(random(1) &gt; 0.7)
            {
                potential = "Knight"
            }
            else
            {
                if(random(1) &gt; 0.5)
                {
                    potential = "Mage";
                }
                else
                {
                    potential = "Archer";
                }
            }
        }
    }
    alarm[1] = room_speed * tpause;
}

goodCount = 0;
good[goodCount] = "Goodjob";
goodCount++;
good[goodCount] = "Good job";
goodCount++;
good[goodCount] = "Good job!";
goodCount++;
good[goodCount] = "gj";
goodCount++;
good[goodCount] = "nice";
goodCount++;
good[goodCount] = "noice";
goodCount++;
good[goodCount] = "NOICE";
goodCount++;
good[goodCount] = "Nice!";
goodCount++;
good[goodCount] = "Great!";
goodCount++;
good[goodCount] = "Excellent!";
goodCount++;
good[goodCount] = "good";

adjCount = 0;
adj[adjCount] = "pickled";
adjCount++;
adj[adjCount] = "bloody";
adjCount++;
adj[adjCount] = "blocky";
adjCount++;
adj[adjCount] = "spicy";
adjCount++;
adj[adjCount] = "wobbly";
adjCount++;
adj[adjCount] = "wrinkled";
adjCount++;
adj[adjCount] = "junky";
adjCount++;
adj[adjCount] = "cheesy";
adjCount++;
adj[adjCount] = "grungy";
adjCount++;
adj[adjCount] = "boosted";
adjCount++;
adj[adjCount] = "icky";
adjCount++;
adj[adjCount] = "crazy";
adjCount++;
adj[adjCount] = "sweaty";
adjCount++;
adj[adjCount] = "sour";
adjCount++;
adj[adjCount] = "bitter";
adjCount++;
adj[adjCount] = "salty";
adjCount++;
adj[adjCount] = "toasty";
adjCount++;
adj[adjCount] = "bloated";
adjCount++;
adj[adjCount] = "rotten";
adjCount++;
adj[adjCount] = "smelly";
adjCount++;
adj[adjCount] = "lazy";


nounCount = 0;
noun[nounCount] = "tomato";
nounCount++;
noun[nounCount] = "potato";
nounCount++;
noun[nounCount] = "pineapple";
nounCount++;
noun[nounCount] = "swine";
nounCount++;
noun[nounCount] = "fruit";
nounCount++;
noun[nounCount] = "animal";
nounCount++;
noun[nounCount] = "apple";
nounCount++;
noun[nounCount] = "raspberry";
nounCount++;
noun[nounCount] = "strawberry";
nounCount++;
noun[nounCount] = "watermelon";
nounCount++;
noun[nounCount] = "cantaloupe";
nounCount++;
noun[nounCount] = "poker";
nounCount++;
noun[nounCount] = "honeydew";
nounCount++;
noun[nounCount] = "grape";
nounCount++;
noun[nounCount] = "kiwi";
nounCount++;
noun[nounCount] = "avocado";
nounCount++;
noun[nounCount] = "bok choi";
nounCount++;
noun[nounCount] = "lemon";
nounCount++;
noun[nounCount] = "lime";
nounCount++;
noun[nounCount] = "corpse";
nounCount++;
noun[nounCount] = "orange";
nounCount++;
noun[nounCount] = "citrus";
nounCount++;
noun[nounCount] = "banana";
nounCount++;
noun[nounCount] = "mango";


badCount = 0;
for(count = 0; count &lt; array_length_1d(adj); count++)
{
    for(count2 = 0; count2 &lt; array_length_1d(noun); count2++)
    {
        bad[badCount] = "You " + adj[count] + " " + noun[count2] + "!";
        badCount ++;
    }
}
for(count = 0; count &lt; array_length_1d(noun); count++)
{
    for(count2 = 0; count2 &lt; array_length_1d(noun); count2++)
    {
        if(noun[count] != noun[count2])
        {
            bad[badCount] = "Go " + noun[count] + " a " + noun[count2] + "!";
            badCount ++;
        }
    }
}
//show_debug_message(badCount);
//show_debug_message(array_length_1d(bad));
//show_debug_message(bad);
//show_debug_message(noun[0]);

greetCount = 0;
greet[greetCount] = "Hi";
greetCount++;
greet[greetCount] = "sup";
greetCount++;
greet[greetCount] = "Hello!";
greetCount++;
greet[greetCount] = "Howdy.";
greetCount++;
greet[greetCount] = "heyyyy";
greetCount++;
greet[greetCount] = "hallo";


noCount = 0;
no[noCount] = "no";
noCount++;
no[noCount] = "No way";
noCount++;
no[noCount] = "I refuse";
noCount++;
no[noCount] = "I'm good";
noCount++;
no[noCount] = "Nah";


yesCount = 0;
yes[yesCount] = "Yes.";
yesCount++;
yes[yesCount] = "yeah";
yesCount++;
yes[yesCount] = "yea";
yesCount++;
yes[yesCount] = "yup";
yesCount++;
yes[yesCount] = "Of course.";
yesCount++;
yes[yesCount] = "sure";

needCount = 0;
need[needCount] = "We need a...";

thankCount = 0;
thank[thankCount] = "Thanks";
thankCount++;
thank[thankCount] = "Thank you.";
thankCount++;
thank[thankCount] = "ty";
thankCount++;
thank[thankCount] = "thx";

whatCount = 0;
what[whatCount] = "wat";
whatCount++;
what[whatCount] = "What?";
whatCount++;
what[whatCount] = "?";
whatCount++;
what[whatCount] = "huh?";
whatCount++;
what[whatCount] = "???";

npCount = 0;
np[npCount] = "np";
npCount++;
np[npCount] = "of course";
npCount++;
np[npCount] = "No problem.";

comeCount = 0;
come[comeCount] = "Come";
comeCount++;
come[comeCount] = "here";
comeCount++;
come[comeCount] = "Go there please";
comeCount++;
come[comeCount] = "help";
comeCount++;
come[comeCount] = "Regroup";
comeCount++;
come[comeCount] = "halp";
comeCount++;
come[comeCount] = "Help";
comeCount++;
come[comeCount] = "come";
comeCount++;

oiCount = 0;
oi[oiCount] = "Oi";
oiCount++;
oi[oiCount] = "Watch it!";
oiCount++;
oi[oiCount] = "Where are you shooting that thing!?";
oiCount++;
oi[oiCount] = "Ow";
oiCount++;
oi[oiCount] = "ouch";
oiCount++;

sorryCount = 0;
sorry[sorryCount] = "srry"
sorryCount++;
sorry[sorryCount] = "Sorry"
sorryCount++;
sorry[sorryCount] = "my bad"
sorryCount++;
sorry[sorryCount] = "Apologies."
sorryCount++;
sorry[sorryCount] = "my fault"
sorryCount++;
sorry[sorryCount] = "oops"
//////////////////////////////////////////////////////////////////////////////////////////////////////
/*
char = spr_Archer;
walk = spr_ArcherWalk;
attack = spr_ArcherAttack;
attackSpeed = 0.4;
proj = obj_Arrow;
projx = 76;
projy = 69;
projSpeed = 5;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_Map)
{
    if(potential == "Knight")
    {
        char = spr_Knight;
        armor = 8;
        weak = 0.3;
        walk = spr_KnightWalk;
        attack = spr_KnightAttack;
        attackSpeed = 0.3;
        proj = obj_Melee;
        projx = 100;
        projy = 67;
        projSpeed = 0;
        
        sprite_index = char;
    }
    else if(potential == "Mage")
    {
        char = spr_Mage;
        walk = spr_MageWalk;
        attack = spr_MageAttack;
        attackSpeed = 0.4;
        proj = obj_Fireball;
        projx = 86;
        projy = 62;
        projSpeed = 5;
        
        sprite_index = char;
    }
    else if(potential == "Archer")
    {
        char = spr_Archer;
        walk = spr_ArcherWalk;
        attack = spr_ArcherAttack;
        attackSpeed = 0.4;
        proj = obj_Arrow;
        projx = 76;
        projy = 69;
        projSpeed = 5;
        
        sprite_index = char;
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitMe = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>complimentMe = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>admire = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>check = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super == true &amp;&amp; global.pause == false)
{
    if(blink == true)
    {
        image_alpha = 0.5;
        alarm[3] = room_speed * .1;
        blink = false;
    }
    else
    {
        image_alpha = 1;
        alarm[3] = room_speed * .1;
        blink = true;
    }
    //move = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>super = false;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(potential == "Unchosen" || decision == true &amp;&amp; rec == false)
{
    if(random(1) &gt; 0.9)
    {
        if(stability &gt; 0)
        {
            if(random(1) &gt; 0.7)
            {
                if(random(1) &gt; 0.5)
                {
                    potential = "Mage";
                }
                else
                {
                    potential = "Archer";
                }
            }
            else
            {
                potential = "Knight";
            }
        }
        else
        {
            if(random(1) &gt; 0.7)
            {
                potential = "Knight"
            }
            else
            {
                if(random(1) &gt; 0.5)
                {
                    potential = "Mage";
                }
                else
                {
                    potential = "Archer";
                }
            }
        }
    }
    alarm[1] = room_speed * tpause;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>talk = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_Lobby)
{
    for(count = 0; count &lt; ds_list_size(global.tempTeam); count++)
    {
        if(instance_exists((ds_list_find_value(global.tempTeam, count))))
        {
            if((ds_list_find_value(global.tempTeam, count)).name == name)
            { 
                position = count;
            }
        }
    }
    //show_debug_message(position);
    global.tempTeamStability[position - 1] = stability;
    global.tempTeamPotential[position - 1] = potential;
    global.tempTeamName[position - 1] = name;
    
    //show_debug_message(ds_list_find_value(global.tempTeamStability, position - 1));
    //ds_list_replace(global.tempTeamPotential, position - 1, potential);
    //show_debug_message(ds_list_find_value(global.tempTeamPotential, position - 1));
    //show_debug_message(stability);
    //show_debug_message(potential);
    
    if(stability &gt; 0)   
    {
        tpause = floor(random_range(2, 4));
    }
    else
    {
        tpause = floor(random_range(2, 4));
    }
    
    lastTalk = ds_list_find_value(dialogue.listTalk, ds_list_size(dialogue.listTalk) - 1);
    //if(lastTalk == name)
    //{
    //    talk = false;
    //}
    if(alarm[0] == -1)// &amp;&amp;  ds_list_size(dialogue.listNum) &gt; 0)
    {
        alarm[0] = room_speed * tpause;
    }
    
    if(obj_Choose.timer &lt;= 5)
    {
        if(potential = "Unchosen")
        {
            if(stability &gt; 0)
            {
                if(random(1) &gt; 0.7)
                {
                    if(random(1) &gt; 0.5)
                    {
                        char = spr_Mage;
                        potential = "Mage";
                        (ds_list_find_value(global.tempTeam, position)).char = char;
                        (ds_list_find_value(global.tempTeam, position)).potential = potential;

                    }
                    else
                    {
                        char = spr_Archer;
                        potential = "Archer";
                        (ds_list_find_value(global.tempTeam, position)).char = char;
                        (ds_list_find_value(global.tempTeam, position)).potential = potential;
                    }
                }
                else
                {
                    char = spr_Knight;
                    potential = "Knight";
                    (ds_list_find_value(global.tempTeam, position)).char = char;
                    (ds_list_find_value(global.tempTeam, position)).potential = potential;
                }
            }
            else
            {
                if(random(1) &gt; 0.7)
                {
                    char = spr_Knight;
                    potential = "Knight"
                    (ds_list_find_value(global.tempTeam, position)).char = char;
                    (ds_list_find_value(global.tempTeam, position)).potential = potential;
                }
                else
                {
                    if(random(1) &gt; 0.5)
                    {
                        char = spr_Mage;
                        potential = "Mage";
                        (ds_list_find_value(global.tempTeam, position)).char = char;
                        (ds_list_find_value(global.tempTeam, position)).potential = potential;
                    }
                    else
                    {
                        char = spr_Archer;
                        potential = "Archer";
                        (ds_list_find_value(global.tempTeam, position)).char = char;
                        (ds_list_find_value(global.tempTeam, position)).potential = potential;
                    }
                }
            }
        }    
        decision = false;
    }
    if(decision == false &amp;&amp; final == false)
    {
        instance_create(x, y, obj_Lock);
        final = true;
        
        //global.teamOne = potential;
        //global.teamOneStability = stability;
    }
    /*
    if(final == true)
    {
        for(count = 0; count &lt; ds_list_size(global.tempTeam); count++)
        {
            if(instance_exists((ds_list_find_value(global.tempTeam, count))))
            {
                if((ds_list_find_value(global.tempTeam, count)).name == name)
                { 
                    ds_list_replace(global.tempTeam, count, id);
                }
            }
        }
    }
    */
    if(room == rm_Lobby &amp;&amp; talk == true)
    {
        addNum = -1;
        listNumRev = ds_list_create();
        listTalkRev = ds_list_create();
        for(counter = ds_list_size(dialogue.listTalk) - 1; counter &gt;= 0; counter--)
        {
            ds_list_insert(listTalkRev, 0, dialogue.listTalk[| counter]);
        }
        for(counter = ds_list_size(dialogue.listNum) - 1; counter &gt;= 0; counter--)
        {
            ds_list_insert(listNumRev, 0, dialogue.listNum[| counter]);
        }
        
        temp[0]= "";
        counted = 0;
        for(counter = ds_list_size(dialogue.listTalk) - 1; counter &gt;= 0; counter--)
        {
            if(dialogue.listTalk[| counter] != name)
            {
                temp[counted] = counter;
                counted ++;
            }
            //ds_list_insert(listTalkRev, 0, dialogue.listTalk[| counter]);
        }
        convoF = ds_list_find_value(dialogue.convo, ds_list_size(dialogue.convo) - 1);
        convo2F = -1;
        valF = ds_list_find_value(dialogue.listNum, ds_list_size(dialogue.listNum) - 1);
        val2F = -2;
        val3F = -3;
        val4F = -4;
        
        lastTalk2 = -1;
        lastTalk3 = -1;
        
        
        if(ds_list_size(dialogue.listNum) &gt; 3)
        {
            convo2F = ds_list_find_value(dialogue.convo, ds_list_size(dialogue.convo) - 2);
            lastTalk2 = ds_list_find_value(dialogue.listTalk, ds_list_size(dialogue.listTalk) - 2);
            lastTalk3 = ds_list_find_value(dialogue.listTalk, ds_list_size(dialogue.listTalk) - 3);
            if(array_length_1d(temp) &gt; 2)
            {
                //lastTalk3 = ds_list_find_value(dialogue.listTalk, ds_list_size(dialogue.listTalk) - 3);
                //ds_list_find_value(listTalkRev, 1);
                val2F = listNumRev[| temp[0]];
                val3F = listNumRev[| temp[1]];
                val4F = listNumRev[| temp[2]];
                //val2F = ds_list_find_value(listNumRev, temp[1]);
                //val3F = ds_list_find_value(listNumRev, temp[2]);
            }
        }
        
        p = id;ds_list_find_value(global.tempTeam, 0);
        
        meTalk = ds_list_create();
        for(count = 0; count &lt; ds_list_size(dialogue.listTalk); count++)
        {
            if(ds_list_find_value(dialogue.listTalk, count) == name)
            {
                ds_list_add(meTalk, count);
            }
        }
        go = true;
        
        text = "";
        if((ds_list_find_index(dialogue.listNum, 5) &gt; ds_list_size(dialogue.listNum) - 3 &amp;&amp; ds_list_size(dialogue.listNum) &gt; 1)|| valF == 5)
        {
            if(decision == false)
            {
                if(stability &gt; 0) 
                {
                    text = "I've already locked in."
                    addNum = 3;
                }
                else
                {
                    if(random(1) &gt; 0.6)
                    {
                        if(random(1) &gt; 0.8)
                        {
                            text = "LOCKED AND LOADED!"
                        }
                        else
                        {
                            text = string_upper(p.no[floor(random(p.noCount))]);
                        }
                        addNum = 3;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
            }
            else if(stability &gt; 0)   
            {
                pendList = ds_list_create();
                
                for(counted = 0; counted &lt; 3; counted++)
                {
                    m = "";
                    //show_debug_message(string(random(1)) + "  " + (ds_list_find_value(global.tempTeam, 0)).name);
                    if(instance_exists((ds_list_find_value(global.tempTeam, counted))))
                    {
                        if((ds_list_find_value(global.tempTeam, counted)).sprite_index == spr_Mage)
                        {
                            m = "Mage";
                            //ds_list_add(pendList, m);
                            //show_debug_message(m);
                        }
                        else if((ds_list_find_value(global.tempTeam, counted)).sprite_index == spr_Knight)
                        {
                            m = "Knight";
                            //ds_list_add(pendList, m);
                            //show_debug_message(m);
                        }
                        else if((ds_list_find_value(global.tempTeam, counted)).sprite_index == spr_Archer)
                        {
                            m = "Archer";
                            //ds_list_add(pendList, m);
                            //show_debug_message(m);
                        } 
                    } 
                    ds_list_add(pendList, m);
                }
                j = potential;
                if(rec == false)
                {
                    if(is_string(convoF))
                    {
                        if(string_char_at(convoF, string_length(convoF) - 1) == "t")
                        {
                            j = "Knight";
                        }
                        else if(string_char_at(convoF, string_length(convoF) - 1) == "r")
                        {
                            j = "Archer";
                        }
                        else if(string_char_at(convoF, string_length(convoF) - 1) == "e")
                        {
                            j = "Mage";
                        }
    
                        show_debug_message(string(random(1)) + "  " + string((ds_list_find_index(pendList, j))))
                        if((ds_list_find_index(pendList, j)) == -1) //potential == "" || string_char_at(potential, string_length(potential)) != string_char_at(convoF, string_length(convoF) - 1))//string_pos(convoF, potential) == 0)
                        {
                            //show_debug_message(convoF + " " + potential);
                            text = p.yes[floor(random(p.yesCount))];
        
                            potential = j;
        
                            stability -= 1;
                            addNum = 4;
                            rec = true;
                        }
                        else //if(string_pos(convoF, potential) != 0)
                        {
                            if(random(1) &gt; 0.9)
                            {
                                text = p.what[floor(random(p.whatCount))];
                                addNum = 8;
                                //stability -= 5;
                            }
                            else
                            {
                                doAdd = false;
                            }  
                        }
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
                else
                {
                    doAdd = false;
                }
                //ds_list_add(dialogue.listNum, 4);
            }
            else
            {
                if(stability &lt; -30)
                {
                    if(random(1) &gt; 0.5)
                    {
                        text = string_upper(p.no[floor(random(p.noCount))]);
                        addNum = 3;
                    }
                    else
                    {
                        text = string_upper(p.bad[floor(random(p.badCount))]);
                        addNum = 1;
                    }
                    if(is_string(convoF) == true)
                    {
                        if(string_char_at(convoF, string_length(convoF) - 1) == "t")
                        {
                            if(random(1) &gt; 0.5)
                            {
                                potential = "Archer";
                            }
                            else
                            {
                                potential = "Mage"
                            }
                        }
                        else if(string_char_at(convoF, string_length(convoF) - 1) == "r")
                        {
                            if(random(1) &gt; 0.5)
                            {
                                potential = "Knight";
                            }
                            else
                            {
                                potential = "Mage"
                            }
                        }
                        else if(string_char_at(convoF, string_length(convoF) - 1) == "e")
                        {
                            if(random(1) &gt; 0.5)
                            {
                                potential = "Archer";
                            }
                            else
                            {
                                potential = "Knight"
                            }
                        }
                        stability -= 10;
                        decision = false;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
                else
                {
                    if(random(1) &gt; 0.8)
                    {
                    text = p.no[floor(random(p.noCount))];
                    addNum = 3;
                    stability -= 5;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
                //ds_list_add(dialogue.listNum, 3);
            }
        }
        else if(lastTalk != name &amp;&amp; (lastTalk == lastTalk2 &amp;&amp; lastTalk == lastTalk3 || (lastTalk == lastTalk2 &amp;&amp; lastTalk == lastTalk3 &amp;&amp; val2F == val3F &amp;&amp; val2F == val4F)))
        {
            for(count = 0; count &lt; ds_list_size(meTalk); count++)
            {
                if(ds_list_find_value(dialogue.listNum, ds_list_find_value(meTalk, count)) == 7)
                {
                    go = false;
                }
            }
            if(go == true)
            {
                if(stability &lt; -30 &amp;&amp; lastTalk != name)
                {
                    if(random(1)&gt; 0.7)
                    {
                        text = "STOP SPAMMING! " + string_upper(p.bad[floor(random(p.badCount))]);
                        //ds_list_add(dialogue.listTalk, name);
                        stability -= 20;
                        addNum = 7;
                    }
                    else
                    {
                        doAdd = false;
                    }
                    //show_debug_message(string(val2F) + " " + string(val3F) + " " + string(val4F));
                    //ds_list_add(dialogue.listNum, 7);
                }
                else
                {
                    if(random(1) &gt; 0.8 &amp;&amp; lastTalk != name)
                    {
                        text = "Stop spamming."
                        stability -= 10; 
                        addNum = 7;
                    }
                    else
                    {
                        doAdd = false;
                    }
                    //ds_list_add(dialogue.listNum, 7);
                }   
            }
            else
            {
                doAdd = false;
            }
        }
        else if(valF == 2 &amp;&amp; lastTalk != name || (ds_list_find_index(dialogue.listNum, 2) == -1 &amp;&amp; lastTalk != name))
        {
            for(count = 0; count &lt; ds_list_size(meTalk); count++)
            {
                if(ds_list_find_value(dialogue.listNum, ds_list_find_value(meTalk, count)) == 2)
                {
                    go = false;
                    break;
                }
            }
            if(stability &gt; 0)   
            {
                if(go == true)
                {
                    if(ds_list_find_index(dialogue.listNum, 2) == -1)
                    {
                        if(random(1) &gt; 0.8)
                        {
                        if(ds_list_size(dialogue.convo) == 1)
                        {
                            stability += 20;
                        }
                        else
                        {
                            stability += 5;
                        }
                        text = p.greet[floor(random(p.greetCount))];
                        //ds_list_add(dialogue.listNum, 2);
                        addNum = 2;
                        }
                        else
                        {
                            doAdd = false;
                        }
                    }
                    else
                    {
                        if(random(1) &gt; 0.9)
                        {
                            stability += 5;
                            text = p.greet[floor(random(p.greetCount))];
                            //ds_list_add(dialogue.listNum, 2);
                            addNum = 2;
                        }
                        else
                        {
                            doAdd = false;
                        }
                    }
                }
                else
                {
                    doAdd = false;
                }
            }
            else
            {
                if(stability &gt; -30)
                {
                    stability += 5;
                    if(random(1) &gt; 0.5)
                    {
                        text = p.bad[floor(random(p.badCount))];
                        addNum = 1;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
                else
                {
                    stability += 5;
                    if(random(1) &gt; 0.5)
                    {
                        text = string_upper(p.bad[floor(random(p.badCount))]);
                        addNum = 1;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
                //ds_list_add(dialogue.listNum, 1);
            }
        }
        
        else if(valF == 1 &amp;&amp; lastTalk != name)
        {
            if(stability &gt; 0)
            {
                if(random(1) &gt; 0.8)
                {
                    text = p.what[floor(random(p.whatCount))];
                    addNum = 8;
                }
                else
                {
                    doAdd = false;
                }
                stability -= 5;
            }
            else if(stability &lt; -30)
            {
                text = string_upper(p.bad[floor(random(p.badCount))]);
                stability -= 15;
                addNum = 1;
            }
            else
            {
                if(random(1) &gt; 0.8)
                {
                    text = p.bad[floor(random(p.badCount))];
                    stability -= 10;
                    addNum = 1;
                }
                else
                {
                    doAdd = false;
                }
            }
            //show_debug_message("SOMETHING HAPPENED");
            //show_debug_message(dialogue.listNum[| ds_list_size(dialogue.listNum) - 1]);
            //show_debug_message(valF);
            //show_debug_message(dialogue.convo[| ds_list_size(dialogue.convo) - 1]);
            //ds_list_add(dialogue.listNum, 1);
        }
        else if(valF == 3 &amp;&amp; lastTalk != name)
        {
            if(random(1) &gt; 0.3)
            {
                doAdd = false;
            }
            else
            {
                if(random(1) &gt; 0.3)
                {
                    text = p.what[floor(random(p.whatCount))];
                    addNum = 8;
                }
                else
                {
                    text = p.bad[floor(random(p.badCount))];
                    addNum = 1;
                }
            }
            //ds_list_add(dialogue.listNum, 8);
        }
        else if(valF == 4 &amp;&amp; lastTalk != name)
        {
            if(stability &gt; -30)
            {
                if(random(1) &gt; 0.5)
                {
                    text = p.thank[floor(random(p.thankCount))];
                    addNum = 6;
                }
                else
                {
                    doAdd = false;
                }
                stability += 5;
            }
            else
            {
                text = string_upper(p.bad[floor(random(p.badCount))]);
                addNum = 1;
            }
            //ds_list_add(dialogue.listNum, 6);
        }
        
        else if(valF == 6 &amp;&amp; lastTalk != name)
        {
            if (ds_list_find_value(listTalkRev, ds_list_find_index(listNumRev, 4)) == name)
            {
                for(count = 0; count &lt; ds_list_size(meTalk); count++)
                {
                    if(ds_list_find_value(dialogue.listNum, ds_list_find_value(meTalk, count)) == 4)
                    {
                        go = false;
                        break;
                    }
                }
                if(stability &lt; -30)
                {
                    if(go == true)
                    {
                        stability -= 5;
                        text = string_upper(p.np[floor(random(p.npCount))]);
                        addNum = 9;
                    }
                    else
                    {
                        doAdd = false;
                    }
                    //ds_list_add(dialogue.listNum, 9);
                }
                else if(ds_list_size(dialogue.convo) == 1 || ds_list_find_index(dialogue.listNum, 4) == -1 &amp;&amp; ds_list_find_index(dialogue.listNum, 2) == -1)
                {
                    text = p.what[floor(random(p.whatCount))];
                    addNum = 8;   
                }
                else
                {
                    stability += 5;
                    text = p.np[floor(random(p.npCount))];
                    addNum = 9;
                    //ds_list_add(dialogue.listNum, 9);
                }
            }
            else
            {
                doAdd = false;
            }
        } 
        else
        {
            if(stability &lt; -30)
            {
                if(random(1) &gt; 0.7)
                {
                    stability -= 5;
                    text = string_upper(p.bad[floor(random(p.badCount))]);
                    addNum = 1
                }
                else
                {
                    doAdd = false;
                }
            }
            else if(stability &gt; -30)
            {
                pendList = ds_list_create();
                m = "";
                for(counted = 0; counted &lt; ds_list_size(global.tempTeam); counted++)
                {
                    if(instance_exists((ds_list_find_value(global.tempTeam, counted))))
                    {
                        if((ds_list_find_value(global.tempTeam, counted)).sprite_index == spr_Mage)
                        {
                            m = "Mage";
                            //ds_list_add(pendList, m);
                            //show_debug_message(m);
                        }
                        else if((ds_list_find_value(global.tempTeam, counted)).sprite_index == spr_Knight)
                        {
                            m = "Knight";
                            //ds_list_add(pendList, m);
                            //show_debug_message(m);
                        }
                        else if((ds_list_find_value(global.tempTeam, counted)).sprite_index == spr_Archer)
                        {
                            m = "Archer";
                            //ds_list_add(pendList, m);
                            //show_debug_message(m);
                        } 
                    } 
                    ds_list_add(pendList, m);
                }
                for(count = 0; count &lt; ds_list_size(meTalk); count++)
                {
                    if(ds_list_find_value(dialogue.listNum, ds_list_find_value(meTalk, count)) == 5)
                    {
                        go = false;
                    }
                }
                
                if(random(1) &gt; 0.5 &amp;&amp; go == true)
                {
                    if(ds_list_find_index(pendList, "Mage") == -1 &amp;&amp; stability &gt; -30)
                    {
                        text = "We need a Mage.";
                        addNum = 5;
                    }
                    else if(ds_list_find_index(pendList, "Archer") == -1 &amp;&amp; stability &gt; -30)
                    {
                        text = "We need a Archer.";
                        addNum = 5;
                    }
                    else if(ds_list_find_index(pendList, "Knight") == -1 &amp;&amp; stability &gt; -30)
                    {
                        text = "We need a Knight.";
                        addNum = 5;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
                else
                {
                    if(ds_list_find_index(dialogue.listNum, 2) == -1)
                    {
                        if(random(1) &gt; 0.9)
                        {
                            stability += 10;
                            text = p.greet[floor(random(p.greetCount))];
                            addNum = 2
                        }
                    } 
                    else
                    {
                        doAdd = false;
                    }  
                }
            }
            else
            {
                doAdd = false;
            }
        }
        
        if(doAdd == true &amp;&amp; text != "")
        {
            //add stuff to list
            ds_list_add(dialogue.convo, text);
            ds_list_add(dialogue.listTalk, name);
            ds_list_add(dialogue.listNum, addNum);
            
            //add stuff to list reverse
            ds_list_insert(listTalkRev, 0, name);
            ds_list_insert(listNumRev, 0, addNum);
            
            //show_debug_message(dialogue.convo[| ds_list_size(dialogue.convo) - 1] + "&lt; --" + dialogue.listTalk[| ds_list_size(dialogue.listTalk) - 1]);
            if(dialogue.line == "")
            {
                dialogue.line = name + ": " + text;
            }
            else
            {
                dialogue.line = dialogue.line + "#" + name + ": " + text;
                //show_debug_message(dialogue.line);
            }
        }
        doAdd = true;
        talk = false;
        alarm[0] = room_speed * tpause;
    }
        
    if(potential != "Unchosen")
    {
        if(potential == "Mage")
        {
            char = spr_Mage;
            sprite_index = spr_Mage;
            (ds_list_find_value(global.tempTeam, position)).char = char;
            (ds_list_find_value(global.tempTeam, position)).potential = potential;
        }
        else if(potential == "Archer")
        {
            char = spr_Archer;
            sprite_index = spr_Archer;
            (ds_list_find_value(global.tempTeam, position)).char = char;
            (ds_list_find_value(global.tempTeam, position)).potential = potential;
        }
        else if(potential == "Knight")
        {
            char = spr_Knight;
            sprite_index = spr_Knight;
            (ds_list_find_value(global.tempTeam, position)).char = char;
            (ds_list_find_value(global.tempTeam, position)).potential = potential;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(hp &lt;= 0 &amp;&amp; room == rm_Map)
{
    pos = ds_list_find_index(obj_Spawn.members, id);
    ds_list_delete(obj_Spawn.members, pos);
    instance_destroy();
}
if(global.pause == false &amp;&amp; room == rm_Map &amp;&amp; instance_exists(obj_Avoid) == true)//|| instance_exists(obj_Portal) == true))
{
    
    frame = image_index;
    
    closest2 = instance_find(obj_Avoid, 0);
    closest = instance_nearest(x, y, obj_Avoid);
    for(count = 0; count &lt; instance_number(obj_Avoid); count++)
    {
        if(distance_to_object(instance_find(obj_Avoid, count)) &lt;= distance_to_object(closest) &amp;&amp; closest2 != closest)
        {
            closest2 = instance_find(obj_Avoid,count);
        }  
    }
    
    enemy = "";
    
    if(stability &gt; -30)
    {
        enemy = closest;
    }
    else
    {
        if(instance_exists(obj_GoodGuys) == true)
        {
            for(count = 0; count &lt; instance_number(obj_GoodGuys); count++)
            {
                if(instance_find(obj_GoodGuys,count) != id)//distance_to_object(instance_find(obj_GoodGuys, count)) &lt;= distance_to_object(enemy) &amp;&amp; enemy != id)
                {
                    enemy = instance_find(obj_GoodGuys,count);
                }  
            }
            for(count = 0; count &lt; instance_number(obj_GoodGuys); count++)
            {
                if(distance_to_object(instance_find(obj_GoodGuys, count)) &lt;= distance_to_object(enemy))
                {
                    enemy = instance_find(obj_GoodGuys,count);
                }
            }
        }   
    }
    
    if(closest.x &lt;= 640 &amp;&amp; closest.y &lt;= 360)
    {
        quadrant = 0;
    }
    else if(closest.x &gt;= 640 &amp;&amp; closest.y &lt;= 360)
    {
        quadrant = 1;
    }
    else if(closest.x &lt;= 640 &amp;&amp; closest.y &gt;= 360)
    {
        quadrant = 2;
    }
    else //if(closest.x &gt;= 640 &amp;&amp; closest.y &lt;= 360)
    {
        quadrant = 3;
    }
    if(x &lt;= 640 &amp;&amp; y &lt;= 360)
    {
        quadrantYou = 0;
    }
    else if(x &gt;= 640 &amp;&amp; y &lt;= 360)
    {
        quadrantYou = 1;
    }
    else if(x &lt;= 640 &amp;&amp; y &gt;= 360)
    {
        quadrantYou = 2;
    }
    else //if(closest.x &gt;= 640 &amp;&amp; closest.y &lt;= 360)
    {
        quadrantYou = 3;
    }
    
    if(distance_to_point(runX, runY) &lt;= 32 &amp;&amp; goRandom == true)
    {
        goRandom = false;
    }
    else if(distance_to_point(runX, runY) &lt;= 32 &amp;&amp; run == true)
    {
        run = false;
    }
    else if(distance_to_point(runX, runY) &lt;= 32 &amp;&amp; goTo == true)
    {
        goTo = false;
    }
    else if(distance_to_point(runX, runY) &lt;= 32 &amp;&amp; running == true)
    {
        running = false;
    }
    /*
    if(super == true &amp;&amp; attackSpeed == 0.4 &amp;&amp; distance_to_point(0, y) &lt;= 64 || distance_to_point(x, 0) &lt;= 64 || distance_to_point(room_width, y) &lt;= 64 || distance_to_point(x, 0) &lt;= 64)
    {
        inst = instance_place(x, y, obj_Avoid);
        
        if(inst != noone)
        {
            if(distance_to_point(0, y) &lt;= 64 || distance_to_point(x, 0) &lt;= 64 || distance_to_point(room_width, y) &lt;= 64 || distance_to_point(x, 0) &lt;= 64 &amp;&amp; coll != inst)
            {
                runX = random_range(128, 1152);
                runY = random_range(128, 592);
                running = true;
            }
            //else if(running == true)
            //{
            //     mp_potential_step_object(runX, runY, 6, obj_Avoid);
            //}
            coll = inst;
        }
    }
    */
    /*
    if(alarm[8] == -1)
    {
        if(abs(x - stableX) &lt; 64 &amp;&amp; abs(y - stableY) &lt; 64 &amp;&amp; super == true)
        {
            goAttack = false;
            goRandom = false;
            run = false;
            goTo = true;
            runX = random_range(128, 1152);
            runY = random_range(128, 592);
        }
        alarm[8] = room_speed * 3;
        stableX = x;
        stableY = y;
    }
    */

    if(goTo == true &amp;&amp; goAttack == false)
    {
        sprite_index = walk;
        if(place_meeting(x, y, obj_Avoid) == false || super == false)
        {
            //show_debug_message(string(random(1)) + "avoid");
            mp_potential_step_object(runX, runY, 6, obj_Avoid);
        }
        else
        {
            //show_debug_message(string(random(1)) + "barrel");
            direction = point_direction(x,y,runX,runY);
            //move_towards_point(runX, runY, 6);
            speed = 6;
        }
    }
    else if(run == true &amp;&amp; hit == false &amp;&amp; goAttack == false)
    {
        sprite_index = walk;
        mp_potential_step_object(runX, runY, 6, obj_Avoid);
    }
    else if(goRandom == true &amp;&amp; hit == false &amp;&amp; admire == false &amp;&amp; goAttack == false)
    {
        sprite_index = walk;
        mp_potential_step_object(runX, runY, 6, obj_Avoid);
    }
    else if(goAttack == true)
    {
        if(image_index &gt;= image_number - 1 &amp;&amp; sprite_index == attack) //img_index &gt;= image_number - 1 &amp;&amp; sprite_index == attack || 
        {
            goAttack = false;
            check = false;
            alarm[4] = room_speed * 0.3;
            image_speed = 0.2;
            sprite_index = char;
            inst = instance_create(x + (other.image_xscale * (projx - 64)), y + (projy - 64), proj);
            with(inst)
            {
                name = other.name;
                image_xscale = other.image_xscale;
                vel = other.projSpeed * other.image_xscale;
            }  
        }
        else
        {
            image_speed = attackSpeed;
            sprite_index = attack;
            if(enemy.x &gt; x)
            {
                image_xscale = 1;
            }
            else
            {
                image_xscale = -1;
            }
        }   
    }
    
    if(distance_to_point(closest.x, closest.y) &lt;= random_range(128,150) &amp;&amp; attackSpeed == 0.4 &amp;&amp; place_meeting(x, y, obj_Avoid) == false)//&amp;&amp; goTo == false)
    {
        //goTo = false;
        midX = (closest.x + closest2.x)/2;
        midY = (closest.y + closest2.y)/2;
        //facing = point_direction(x,y,closest.x ,closest.y);
        if(x != midX &amp;&amp; y != midY)
        {
            facing = point_direction(x, y, midX, midY);
        }
        else
        {
            facing = point_direction(x, y, (x + closest.x)/2 + x - closest.x, (y + closest.y)/2 + closest.y - y);
        }
        //if(closest.y &gt; y)
        //{
        facing = point_direction(x, y, closest.x, closest.y);
        direction = (facing + (160 + random(40))); //facing + 180;//
        //runningTemp = direction;
        
        //speed += 0.2;
        //direction = runningTemp;
        speed = 4;
        //if(speed &gt; 4) speed = 4;
    } 
    else if(attackSpeed == 0.3 &amp;&amp; distance_to_point(closest.x, closest.y) &lt;= 150)
    {
        if(hp &lt; 15)
        {
            facing = point_direction(x,y,(closest.x + closest2.x)/2,(closest.y + closest2.y)/2);
            direction = (facing + (140 + random(60)));
            speed = 4;
        }
        else
        {
            if(distance_to_point(closest.x, closest.y) &lt;= 64)
            {
                goAttack = true;
            }
            else
            {
                goAttack = false;
            }   
        }
    }
    else if(enemy.y &gt; y - 16 &amp;&amp; enemy.y &lt; y + 16 &amp;&amp; attackSpeed == 0.4 &amp;&amp; distance_to_point(closest.x, closest.y) &gt;= 128 &amp;&amp; goAttack == false)// &amp;&amp; goTo == false)
    {
        //if(place_meeting(x, y, obj_Avoid) == false)//&amp;&amp; distance_to_point(closest.x, closest.y) &gt; 128)
        //{
            if(closest.object_index != obj_Arrow &amp;&amp; closest.object_index != obj_Fireball &amp;&amp; closest.object_index != obj_WallLong &amp;&amp; closest.object_index != obj_WallTall)
            {
                goAttack = true;
            }
            goTo = false;
        //}
    }
    else if(distance_to_point(closest.x, closest.y) &lt;= 328 &amp;&amp; run == false &amp;&amp; goTo == false &amp;&amp; goAttack == false)
    {
        if(quadrant == 0)
        {
            runX = round(random_range(640, 1280));
            runY = round(random_range(360, 720));
        }
        else if(quadrant == 1)
        {
            runX = round(random(640));
            runY = round(random_range(360, 720));
        }
        else if(quadrant == 2)
        {
            runX = round(random_range(640, 1280));
            runY = round(random(360));
        }
        else //if(quadrant == 3)
        {
            runX = round(random(640));
            runY = round(random(360));
        }
        run = true;
    }
    else if(quadrant == quadrantYou &amp;&amp; run == true &amp;&amp; goTo == false &amp;&amp; goAttack == false)
    {
        run = false;
        if(quadrant == 0 || quadrant == 3)
        {
            if(closest.x &lt;= x &amp;&amp; closest.y &gt;= y)
            {
                runX = round(random_range(640, 1280));//0;//
                runY = round(random(360));//720;//
            }
            else if(closest.x &lt;= x &amp;&amp; closest.y &lt;= y)
            {
                runX = round(random(640));//1280;//
                runY = round(random_range(360, 720));//0;//
            }
            else if(closest.x &gt;= x &amp;&amp; closest.y &gt;= y)
            {
                runX = round(random(640));//1280;//
                runY = round(random_range(360, 720));//0;//
            }
            else
            {
                runX = round(random_range(640, 1280));//0;//
                runY = round(random(360));//720;//
            }
        }
        else if(quadrant == 1 || quadrant == 2)
        {
            if(closest.x &lt;= x &amp;&amp; closest.y &lt;= y)
            {
                runX = round(random_range(640, 1280));//0;//
                runY = round(random_range(360, 720));//0;//
            }
            else if(closest.x &lt;= x &amp;&amp; closest.y &gt;= y)
            {
                runX = round(random(640));//1280;//
                runY = round(random(360));//720;//
            }
            else if(closest.x &gt;= x &amp;&amp; closest.y &lt;= y)
            {
                runX = round(random_range(640, 1280));//0;//
                runY = round(random_range(360, 720));//0;//
            }
            else
            {
                runX = round(random(640));//1280;//
                runY = round(random(360));//720;//
            }
        }
        goTo = true;
    }
    else if(goRandom == false &amp;&amp; admire == false &amp;&amp; run = false &amp;&amp; goTo == false &amp;&amp; goAttack == false)
    {
        if(random(1) &gt; 0.5)
        {
            runX = round(random(room_width));
            runY = round(random(room_height));
            goRandom = true;
        }
        else
        {
            admire = true;
            sprite_index = char;
            alarm[6] = room_speed * random_range(0.5, 1.5);
        }
    }
    
     
    if(speed &gt;= 12) speed = 12;  
    x = min(x, room_width - 16);
    x = max(x, 16);
    y = min(y, room_height - 16);
    y = max(y, 16); 
}
else
{
    image_index = frame;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_Map &amp;&amp; global.pause == false)
{
    if(stability &gt; 0)   
    {
        tpause = (random_range(1, 4));
    }
    else
    {
        tpause = (random_range(1, 2));
    }
    
    lastTalk = ds_list_find_value(dialogue.listTalk, ds_list_size(dialogue.listTalk) - 1);
    /*if(lastTalk == name)
    {
        talk = false;
    }
    else */
    
    if(talk == true)
    {
        addNum = -1;
        listNumRev = ds_list_create();
        listTalkRev = ds_list_create();
        for(counter = ds_list_size(dialogue.listTalk) - 1; counter &gt;= 0; counter--)
        {
            ds_list_insert(listTalkRev, 0, dialogue.listTalk[| counter]);
        }
        for(counter = ds_list_size(dialogue.listNum) - 1; counter &gt;= 0; counter--)
        {
            ds_list_insert(listNumRev, 0, dialogue.listNum[| counter]);
        }
        
        temp[0]= "";
        counted = 0;
        for(counter = ds_list_size(dialogue.listTalk) - 1; counter &gt;= 0; counter--)
        {
            if(dialogue.listTalk[| counter] != name)
            {
                temp[counted] = counter;
                counted ++;
            }
            //ds_list_insert(listTalkRev, 0, dialogue.listTalk[| counter]);
        }
        convoF = ds_list_find_value(dialogue.convo, ds_list_size(dialogue.convo) - 1);
        convo2F = -1;
        valF = ds_list_find_value(dialogue.listNum, ds_list_size(dialogue.listNum) - 1);
        val2F = -2;
        val3F = -3;
        val4F = -4;
        
        lastTalk2 = -1;
        lastTalk3 = -1;
        
        
        if(ds_list_size(dialogue.listNum) &gt; 3)
        {
            convo2F = ds_list_find_value(dialogue.convo, ds_list_size(dialogue.convo) - 2);
            lastTalk2 = ds_list_find_value(dialogue.listTalk, ds_list_size(dialogue.listTalk) - 2);
            lastTalk3 = ds_list_find_value(dialogue.listTalk, ds_list_size(dialogue.listTalk) - 3);
            
            if(array_length_1d(temp) &gt; 2)
            {
                //lastTalk3 = ds_list_find_value(dialogue.listTalk, ds_list_size(dialogue.listTalk) - 3);
                //ds_list_find_value(listTalkRev, 1);
                val2F = listNumRev[| temp[0]];
                val3F = listNumRev[| temp[1]];
                val4F = listNumRev[| temp[2]];
                //val2F = ds_list_find_value(listNumRev, temp[1]);
                //val3F = ds_list_find_value(listNumRev, temp[2]);
            }   
        }
        
        p = id;//obj_Player;
        
        text = "";
        
        /*if(lastTalk != name &amp;&amp; lastTalk == lastTalk2 &amp;&amp; lastTalk == lastTalk3)// || val2F == val3F &amp;&amp; val2F == val4F)
        {
            if(stability &lt; -20)
            {
                if(random(1) &gt; 0.4)
                {
                    text = "STOP SPAMMING!"; 
                }
                else
                {
                    text = string_upper(p.bad[floor(random(p.badCount))]);
                }
                //ds_list_add(dialogue.listTalk, name);
                stability -= 20;
                //show_debug_message(string(val2F) + " " + string(val3F) + " " + string(val4F));
                //ds_list_add(dialogue.listNum, 7);
            }
            else
            {
                text = "Stop spamming."
                stability -= 10; 
                //ds_list_add(dialogue.listNum, 7);
            }
            addNum = 7;
        }
        else */
        if(valF == 0 &amp;&amp; lastTalk != name)
        {
            if(stability &gt; 0)
            {
                if(complimentMe == true)
                {
                    if(random(1) &gt; 0.7)
                    {
                        text = p.thank[floor(random(p.thankCount))];
                        addNum = 6;
                    }
                    else
                    {
                        doAdd = false;
                    }
                    stability += 10;
                }
                else
                {
                    if(random(1) &gt; 0.7)
                    {
                        text = p.what[floor(random(p.whatCount))];
                        addNum = 8;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
            }
            else if(stability &lt; -30)
            {
                //text = string_upper(p.bad[floor(random(p.badCount))]);
                stability += 10;
                //addNum = 1;
                doAdd = false;
            }
            else
            {
                if(complimentMe == true)
                {
                    if(random(1) &gt; 0.8)
                    {
                        text = p.thank[floor(random(p.thankCount))];
                        addNum = 6;
                    }
                    else
                    {
                        doAdd = false;
                    }
                    stability += 10;
                }
                else
                {
                    if(random(1) &gt; 0.7)
                    {
                        text = p.what[floor(random(p.whatCount))];
                        addNum = 8;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
            }
        }
        else if(valF == 1 &amp;&amp; lastTalk != name)
        {
            if(stability &gt; 0)
            {
                if(random(1) &gt; 0.5)
                {
                    text = p.what[floor(random(p.whatCount))];
                    addNum = 8;
                }
                else
                {
                    doAdd = false;
                }
                stability -= 10;
            }
            else if(stability &lt; -30)
            {
                text = string_upper(p.bad[floor(random(p.badCount))]);
                stability -= 15;
                addNum = 1;
            }
            else
            {
                text = p.bad[floor(random(p.badCount))];
                stability -= 10;
                addNum = 1;
            }
        }/*
        else if(valF == 3 &amp;&amp; lastTalk != name)
        {
            text = p.what[floor(random(p.whatCount))];
            addNum = 8;
            //ds_list_add(dialogue.listNum, 8);
        }
        else if(valF == 4 &amp;&amp; lastTalk != name)
        {
            text = p.thank[floor(random(p.thankCount))];
            addNum = 6;
            //ds_list_add(dialogue.listNum, 6);
        }*/
        else if(valF == 10 &amp;&amp; lastTalk != name)
        {
            if(instance_exists(obj_Player) &amp;&amp; obj_Player.justPinged == true)
            {
                /*if(valF == val2F &amp;&amp; valF == val3F &amp;&amp; valF == val4F)
                {
                    if(stability &lt; -20)
                    {
                        if(random(1) &gt; 0.6)
                        {
                        text = "STOP SPAMMING!"
                        }
                        else
                        {
                        text = string_upper(p.bad[floor(random(p.badCount))]);
                        }
                        //ds_list_add(dialogue.listTalk, name);
                        stability -= 20;
                        addNum = 7;
                        //show_debug_message(string(val2F) + " " + string(val3F) + " " + string(val4F));
                        //ds_list_add(dialogue.listNum, 7);
                    }
                    else
                    {
                        if(random(1) &gt; 0.6)
                        {
                            text = "Stop spamming."
                            stability -= 10;
                            addNum = 7; 
                        }
                        else
                        {
                            doAdd = false;
                        }
                        //ds_list_add(dialogue.listNum, 7);
                    }
                    
                }
                else */
                if(stability &gt; 0)
                {
                    if(random(1) &gt; 0.8)
                    {
                        text = p.yes[floor(random(p.yesCount))];
                        addNum = 4;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
                else if(stability &lt; -30)
                {
                    if(random(1) &gt; 0.8)
                    {
                        text = string_upper(p.bad[floor(random(p.badCount))]);
                        stability -= 10;
                        addNum = 1;
                    }
                    else
                    {
                        doAdd = false;
                    }
                }
                else
                {
                    if(randChance &lt;= 0.8)
                    {
                        text = p.no[floor(random(p.noCount))];
                        addNum = 3;
                    }
                    else
                    {
                        if(random(1) &gt; 0.6)
                        {
                            text = p.yes[floor(random(p.yesCount))];
                            addNum = 4;
                        }
                        else
                        {
                            doAdd = false;
                        }
                    }
                }
            }
            else
            {
                doAdd = false;
            }
        }
        else if(valF == 11 &amp;&amp; lastTalk == hitMeName)
        {
            if(stability &gt; 0)
            {
                if(random(1) &gt; 0.8)
                {
                    text = p.sorry[floor(random(p.sorryCount))];
                    stability += 5;
                    addNum = 12;
                }
                else
                {
                    doAdd = false;
                }
            }
            else if(stabiltiy &lt; -30)
            {
                if(random(1) &gt; 0.9)
                {
                    if(random(1) &gt; 0.5)
                    {
                        text = string_upper(p.bad[floor(random(p.badCount))]);
                        stability -= 10;
                        addNum = 1;
                    }
                    else
                    {
                        text = string_upper(p.np[floor(random(p.npCount))]);
                        stability -= 5;
                        addNum = 9;
                    }  
                }
                else
                {
                    doAdd = false;
                }
                
            }
            else
            {
                if(random(1) &gt; 0.9)
                {
                    text = p.sorry[floor(random(p.sorryCount))];
                    stability += 1;
                    addNum = 12;
                }
                else
                {
                    doAdd = false;
                }
            }
        }
        else if(valF == 12 &amp;&amp; hitMe == true &amp;&amp; lastTalk != name)
        {
            if(stability &gt; 0)   
            {
                if(random(1) &gt; 0.8)
                {
                    text = p.np[floor(random(p.npCount))];
                    stability += 10;
                    addNum = 9;
                }
                else
                {
                    doAdd = false;
                }
            }
            else if(stabiltiy &lt; -30)
            {
                if(random(1) &gt; 0.9)
                {
                    text = string_upper(p.bad[floor(random(p.badCount))]);
                    stability -= 10;
                    addNum = 1; 
                }
                else
                {
                    doAdd = false;
                }    
            }
            else
            {
                if(random(1) &gt; 0.9)
                {
                    text = p.np[floor(random(p.npCount))];
                    stability += 5;
                    addNum = 9;
                }
                else
                {
                    doAdd = false;
                }
            }
        }
        else
        {
            //show_debug_message("nottalking");
            doAdd = false;
            for(count = 0; count &lt; instance_number(obj_GoodGuys); count++)
            {
                if((instance_find(obj_GoodGuys, count)).complimentMe == true &amp;&amp; (instance_find(obj_GoodGuys, count)).name != name)
                {
                    //show_debug_message("he gud");
                    if(stability &gt; 0)
                    {
                        if(stability &gt; 20)
                        {
                            if(random(1) &gt; 0.8)
                            {
                                text = p.good[floor(random(p.goodCount))];
                                show_debug_message(text);
                                addNum = 0;
                                stability += 5;
                                doAdd = true;
                                break;
                            }
                        }
                        else
                        {
                            if(random(1) &gt; 0.9)
                            {
                                text = p.good[floor(random(p.goodCount))];
                                addNum = 0;
                                stability += 5;
                                doAdd = true;
                                break;
                            }
                        }
                    }
                    else if(stability &lt; -30)
                    {
                        if(random(1) &gt; 0.8)
                        {
                            text = string_upper(p.bad[floor(random(p.badCount))]);
                            stability -= 5;
                            addNum = 1;
                            doAdd = true;
                            break;
                        }
                    }
                }
            }
            if(doAdd == false)
            {
                for(count = 0; count &lt; instance_number(obj_GoodGuys); count++)
                {
                    if((instance_find(obj_GoodGuys, count)).hitMe == true &amp;&amp; (instance_find(obj_GoodGuys, count)).name == hitMeName)
                    {
                        show_debug_message("he hort");
                        if(stability &gt; 0)
                        {
                            if(stability &gt; 20)
                            {
                                if(random(1) &gt; 0.3)
                                {
                                    text = p.sorry[floor(random(p.sorryCount))];
                                    show_debug_message(text);
                                    addNum = 12;
                                    stability += 5;
                                    doAdd = true;
                                    break;
                                }
                            }
                            else
                            {
                                if(random(1) &gt; 0.5)
                                {
                                    text = p.sorry[floor(random(p.sorryCount))];
                                    show_debug_message(text);
                                    addNum = 12;
                                    stability += 5;
                                    doAdd = true;
                                    break;
                                }
                            }
                        }
                        else if(stability &lt; -30)
                        {
                            if(random(1) &gt; 0.8)
                            {
                                text = string_upper(p.bad[floor(random(p.badCount))]);
                                stability -= 5;
                                addNum = 1;
                                doAdd = true;
                                break;
                            }
                        }
                    }
                }
            }
            if(doAdd == false)
            {
                if(stability &lt; -30)
                {
                    if(random(1) &gt; 0.8)
                    {
                        text = string_upper(p.bad[floor(random(p.badCount))]);
                        stability -= 5;
                        addNum = 1;
                        doAdd = true;
                    }
                }
            }
        }
                 
        if(doAdd == true)
        {
            /*
            //add stuff to list
            ds_list_add(dialogue.convo, text);
            ds_list_add(dialogue.listTalk, name);
            ds_list_add(dialogue.listNum, addNum);
            
            //add stuff to list reverse
            ds_list_insert(listTalkRev, 0, name);///////////////////////////////////////
            ds_list_insert(listNumRev, 0, addNum);
            
            //show_debug_message(dialogue.convo[| ds_list_size(dialogue.convo) - 1] + "&lt; --" + dialogue.listTalk[| ds_list_size(dialogue.listTalk) - 1]);
            if(dialogue.line == "")
            {
                dialogue.line = name + ": " + text;
            }
            else
            {
                dialogue.line = dialogue.line + "#" + name + ": " + text;
                //show_debug_message(dialogue.line);
            }
            */
            global.pause = false;
            
            if(instance_exists(obj_TalkLeftRight) == true)
            {
                with(obj_TalkLeftRight)
                {
                    if(name == other.name)
                    {
                        instance_destroy();
                    }
                }
            }
            if(instance_exists(obj_TalkRight) == true)
            {
                with(obj_TalkRight)
                {
                    if(name == other.name)
                    {
                        instance_destroy();
                    }
                }
            }
            
            if(point_distance(id.x, id.y, 0, y) &lt;= 128)
            {
                if(point_distance(id.x, id.y, x, 0) &lt;= 128)
                {
                    scr_text(text, x + 64, y + 64, id, 1, -1, id.name);
                }
                else if(point_distance(id.x, id.y, x, room_height) &lt;= 128)
                {
                    scr_text(text, x + 64, y - 64, id, 1, 1, id.name);
                }
                else
                {
                    scr_text(text, x + 64, y - 64, id, 1, 1, id.name);
                }
            }
            else if(point_distance(id.x, id.y, room_width, y) &lt;= 128)
            {
                if(point_distance(id.x, id.y, x, 0) &lt;= 128)
                {
                    scr_text(text, x - 64, y + 64, id, -1, -1, id.name);
                }
                else if(point_distance(id.x, id.y, x, room_height) &lt;= 128)
                {
                    scr_text(text, x - 64, y - 64, id, -1, 1, id.name);
                }
                else
                {
                    scr_text(text, x - 64, y - 64, id, -1, 1, id.name);
                }
            }
            else if(point_distance(id.x, id.y, x, 0) &lt;= 128)
            {
                if(id.x &gt;= 640)
                {
                    scr_text(text, x - 64, y + 64, id, -1, -1, id.name);
                }
                else
                {
                    scr_text(text, x + 64, y + 64, id, 1, -1, id.name);
                }
            }
            else if(point_distance(id.x, id.y, x, room_height) &lt;= 128)
            {
                if(id.x &gt;= 640)
                {
                    scr_text(text, x - 64, y - 64, id, -1, 1, id.name);
                }
                else
                {
                    scr_text(text, x + 64, y - 64, id, 1, 1, id.name);
                }
            }
            else
            {
                if(id.x &gt;= 640)
                {
                    scr_text(text, x - 64, y - 64, id, -1, 1, id.name);
                }
                else
                {
                    scr_text(text, x + 64, y - 64, id, 1, 1, id.name);
                }
            }
            
            if(instance_exists(obj_Dialogue) == true)
            {
                dialogue = obj_Dialogue;
                
                ds_list_add(dialogue.convo, text);
                ds_list_add(dialogue.listNum, addNum);
                ds_list_add(dialogue.listTalk, name);
                
                if(dialogue.line == "")
                {
                    dialogue.line = name + ": " + text;
                }
                else
                {
                    dialogue.line = dialogue.line + "#" + name + ": " + text;
                }
                global.pause = false;
            }
        }
        doAdd = true;
        talk = false;
        alarm[0] = room_speed * tpause;
    }
    if(complimentMe == true &amp;&amp; alarm[7] == -1)
    {
        alarm[7] = room_speed * tpause;
    }
    if(hitMe == true &amp;&amp; alarm[9] == -1)
    {
        alarm[9] = room_speed * tpause;
    }
    if(alarm[0] == -1 &amp;&amp; talk == false)//&amp;&amp;  ds_list_size(dialogue.listNum) &gt; 0)
    {
        alarm[0] = room_speed * tpause;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Portal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//nuffing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Fireball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super != true &amp;&amp; check == true &amp;&amp; pause == false)
{
    super = true;
    alarm[2] = room_speed * (1.5);
    hp -= (5 - armor);
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[3] = room_speed * .1;
    blink = true;
    with(other)
    {
        instance_destroy();
    }
}
else if(super != true &amp;&amp; other.name != name &amp;&amp; pause == false)
{   

    super = true;
    alarm[2] = room_speed * (1.5);
    hp -= (5 - armor);
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[3] = room_speed * .1;
    blink = true;
    with(other)
    {
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Arrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super != true &amp;&amp; check == true &amp;&amp; pause == false)
{
    super = true;
    alarm[2] = room_speed * (1.5);
    hp -= (5 - armor);
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[3] = room_speed * .1;
    blink = true;
}
else if(super != true &amp;&amp; other.name != name &amp;&amp; pause == false)
{ 
    super = true;
    alarm[2] = room_speed * (1.5);
    hp -= (5 - armor);
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[3] = room_speed * .1;
    blink = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(super = false &amp;&amp; other.super = false)// &amp;&amp; hitAgain == true)
{
    other.speed = 0;
    other.hspeed += hspeed;// * 2;
    other.vspeed += vspeed;// * 2;
}

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_WallTall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_WallLong">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Avoid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(super == false &amp;&amp; pause == false)
{
    super = true;
    alarm[2] = room_speed * (2);
    hp -= (10 - armor);
    speed = 0;
    hspeed -= sign(other.x - x) * (5 * weak);
    alarm[3] = room_speed * .1;
    blink = true;
    hit = true;
    alarm[5] = room_speed * 0.1;
}
else
{
    if(place_meeting(x, y, obj_Avoid) == true &amp;&amp; goTo == false)
    {
        goAttack = false;
        goRandom = false;
        run = false;
        goTo = true;
        //running = true;
        if(quadrant == 0)
        {
            runX = round(random_range(640, 1280));
            runY = round(random_range(360, 720));
        }
        else if(quadrant == 1)
        {
            runX = round(random(640));
            runY = round(random_range(360, 720));
        }
        else if(quadrant == 2)
        {
            runX = round(random_range(640, 1280));
            runY = round(random(360));
        }
        else //if(quadrant == 3)
        {
            runX = round(random(640));
            runY = round(random(360));
        }
        //instance_create(runX, runY, obj_Ping);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_Lobby)
{
    draw_self();
    
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    font = fnt_Arial;
    
    if(decision != false)
    {
        pend = '"' + name + '"' + "#Pending#Selection:#" + potential;
        draw_text(x, y + 64, pend);
    }
    else
    {
        pend = '"' + name + '"' + "#Locked#Selection:#" + potential;
        draw_text(x, y + 64, pend);    
    }
}
if(room == rm_Map)
{
    draw_self();
    hpBar = draw_healthbar(x - 28 , y - 32, x + 28, y - 42, hp, c_black, c_red, c_green, 0, true, true);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(x, y - 37, string(hp));
    draw_text(x, y - 50, name);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("talk");
show_debug_message(talk);
instance_create(runX, runY, obj_Ping);
/*
show_debug_message(running);
show_debug_message(direction);
show_debug_message(runningTemp);
show_debug_message("+++" + string(random(1)));
show_debug_message(speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
